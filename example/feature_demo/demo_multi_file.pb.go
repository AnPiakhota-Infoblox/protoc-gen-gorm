// Code generated by protoc-gen-go. DO NOT EDIT.
// source: feature_demo/demo_multi_file.proto

package example

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ExternalChild struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ExternalChild) Reset()                    { *m = ExternalChild{} }
func (m *ExternalChild) String() string            { return proto.CompactTextString(m) }
func (*ExternalChild) ProtoMessage()               {}
func (*ExternalChild) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ExternalChild) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BlogPost struct {
	Id     uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
}

func (m *BlogPost) Reset()                    { *m = BlogPost{} }
func (m *BlogPost) String() string            { return proto.CompactTextString(m) }
func (*BlogPost) ProtoMessage()               {}
func (*BlogPost) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BlogPost) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BlogPost) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BlogPost) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func init() {
	proto.RegisterType((*ExternalChild)(nil), "example.ExternalChild")
	proto.RegisterType((*BlogPost)(nil), "example.BlogPost")
}

func init() { proto.RegisterFile("feature_demo/demo_multi_file.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 223 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8f, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0x49, 0xd4, 0x78, 0x2e, 0x68, 0xb1, 0x88, 0x44, 0x2b, 0x49, 0xa3, 0xcd, 0xdd, 0x16,
	0x76, 0xda, 0x9d, 0x7f, 0xea, 0xc3, 0xd2, 0x26, 0x24, 0x97, 0x49, 0x32, 0x30, 0xbb, 0x13, 0xf6,
	0x66, 0x21, 0x5f, 0x4d, 0x3f, 0x9d, 0x64, 0x2f, 0x07, 0x69, 0x06, 0xde, 0x9b, 0xdf, 0x0c, 0xef,
	0xa9, 0xa2, 0x85, 0x4a, 0x82, 0x87, 0xb2, 0x01, 0xcb, 0x66, 0x1a, 0xa5, 0x0d, 0x24, 0x58, 0xb6,
	0x48, 0xb0, 0x19, 0x3c, 0x0b, 0xeb, 0x4b, 0x18, 0x2b, 0x3b, 0x10, 0x3c, 0x68, 0x1e, 0x04, 0xd9,
	0x1d, 0x4c, 0xc7, 0xde, 0x1e, 0x97, 0xc5, 0x93, 0xba, 0xfe, 0x1c, 0x05, 0xbc, 0xab, 0xe8, 0xbd,
	0x47, 0x6a, 0xf4, 0x8d, 0x4a, 0xb1, 0xc9, 0x93, 0xc7, 0xe4, 0xf9, 0xea, 0x3b, 0xc5, 0xe6, 0x35,
	0xfb, 0xfb, 0xbd, 0x4f, 0x57, 0x49, 0xb1, 0x53, 0xab, 0x2d, 0x71, 0xb7, 0xe3, 0x83, 0x2c, 0x98,
	0xf3, 0x89, 0xd1, 0xb7, 0xea, 0x42, 0x50, 0x08, 0xf2, 0x34, 0x9e, 0x1d, 0x85, 0xbe, 0x53, 0x59,
	0x15, 0xa4, 0x67, 0x9f, 0x9f, 0x45, 0x7b, 0x56, 0xa7, 0x8f, 0xdb, 0xaf, 0x9f, 0x8f, 0x0e, 0xa5,
	0x0f, 0xf5, 0x66, 0xcf, 0xd6, 0xa0, 0x6b, 0xb9, 0x26, 0x1e, 0x79, 0x00, 0x67, 0x62, 0xb6, 0xfd,
	0xba, 0x03, 0xb7, 0x9e, 0xb2, 0x9a, 0xb9, 0x81, 0x59, 0xb6, 0x7d, 0x9b, 0xcd, 0x3a, 0x8b, 0xf4,
	0xcb, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xdd, 0xd0, 0x55, 0x0c, 0x01, 0x00, 0x00,
}
